//{ Driver Code Starts
// Counts Palindromic Subsequence in a given String
#include<bits/stdc++.h>
using namespace std;

// } Driver Code Ends
class Solution{
    public:
    /*You are required to complete below method */
    long long int  countPS(string str)
    {
       //Your code here
       int a=str.length();
       int mod=1000000007;
       vector<vector<long long>> dp(a,vector<long long>(a,0));
       for(int i=0;i<a;i++)
       {
           int p=0;
           for(int j=i;j<a;j++)
           {
               if(p==j)
               dp[p][j]=1;
               else if(p+1==j)
               {
                   if(str[p]==str[j])
                   dp[p][j]=3;
                   else
                   dp[p][j]=2;
               }
               else{
                   if(str[p]==str[j])
                   dp[p][j]= (dp[p+1][j] + dp[p][j-1] + 1)%mod;
                   else
                   dp[p][j]= (dp[p+1][j] + dp[p][j-1] - dp[p+1][j-1]+mod)%mod;
               }
               p++;
           }
       }

       return dp[0][a-1];
    }
     
};

//{ Driver Code Starts.
// Driver program
int main()
{
    int t;
    cin>>t;
    while(t--)
    {
        string str;
        cin>>str;
        Solution ob;
        long long int ans = ob.countPS(str);
        cout<<ans<<endl;
    } 
}
// } Driver Code Ends
