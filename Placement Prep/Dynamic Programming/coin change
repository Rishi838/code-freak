Given an integer array of coins[ ] of size N representing different types of currency and an integer sum, 
The task is to find the number of ways to make sum by using different combinations from coins[].  

Input: sum = 4, coins[] = {1,2,3}, 
Output: 4
Explanation: there are four solutions: {1, 1, 1, 1}, {1, 1, 2}, {2, 2}, {1, 3}. 

//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

// } Driver Code Ends
class Solution {
  public:
    long long int count(int coins[], int n, int sum) {
      
        // code here.
        vector<vector<long long>> v(n+1,vector<long long>(sum+1,0));
        for(int i=0;i<=n;i++)
        {
            for(int j=0;j<=sum;j++)
            {
                if(j==0)
                v[i][j]=1;
                else if(i==0)
                v[i][j]=0;
                else if(coins[i-1]>j)
                v[i][j] = v[i-1][j];
                else
                v[i][j] = v[i][j-coins[i-1]] + v[i-1][j];
                // cout<<v[i][j]<<" ";
            }
            // cout<<endl;
        }
        return v[n][sum];
        
    }
};

//{ Driver Code Starts.
int main() {
    int t;
    cin >> t;
    while (t--) {
        int sum, N;
        cin >> sum >> N;
        int coins[N];
        for (int i = 0; i < N; i++) cin >> coins[i];
        Solution ob;
        cout << ob.count(coins, N, sum) << endl;
    }

    return 0;
}


// } Driver Code Ends
