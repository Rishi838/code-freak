/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
bool func(TreeNode *root,int val,vector<pair<int,char>> &v,char ch)
{
    if(root==NULL)
    return false;
    if(root->val==val)
    {
    v.push_back({val,ch});
    return true;
    }
    v.push_back({root->val,ch});
    if(func(root->left,val,v,'L') || func(root->right,val,v,'R'))
    return true;
    v.pop_back();
    return false;
}
    string getDirections(TreeNode* root, int s, int d) {
        vector<pair<int,char>> a,b;
        func(root,s,a,' ');
        func(root,d,b,' ');
        for(auto i:b)
        cout<<i.first<<" "<<i.second<<endl;
        int i=0;
        while(i<a.size() && i<b.size() && a[i].first == b[i].first)
        i++;
        string ans;
        int p=a.size()-i;
        while(p--)
        ans+="U";
        while(i<b.size())
        {
            ans += b[i].second;
            i++;
        }
       return ans;
    }
};
