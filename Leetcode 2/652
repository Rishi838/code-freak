/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
   string func(TreeNode *root,vector<TreeNode*> &vec,map<string,int> &m)
   {
       if(root==NULL)
       return "%";
       string l=func(root->left,vec,m);
       string r=func(root->right,vec,m);
        string s = l+"%"+r + "%" + to_string(root->val) ;
       if(m[s]==1)
       {
           vec.push_back(root);
       } 
       m[s]++;
       return s;
   }
    vector<TreeNode*> findDuplicateSubtrees(TreeNode* root) {      
        map<string,int> m;
        vector<TreeNode *> vec;
        func(root,vec,m);
         return vec;
    }
};
