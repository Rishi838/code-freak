class Solution {
public:
    int idx=0;
    int search(vector<int> inorder,int start,int end,int current)
    {
       for (int i = start; i <= end; i++)
    {
        if (inorder[i] == current)
        {
            return i;
        }
    }
    return -1;
    }
    
    TreeNode *build(vector<int> preorder,vector<int> inorder,int start,int end)
    {
    if (start > end)
    {
        return NULL;
    }
    if(idx>=inorder.size())
    return NULL;
    int current = preorder[idx];
    idx++;
    TreeNode *root = new TreeNode(current);
    if (start == end)
    {
        return root;
    }
    int position = search(inorder, start, end, current);
    root->left = build(preorder, inorder, start, position - 1);
    root->right = build(preorder, inorder, position + 1, end);
    return root;
    }
    
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        if(inorder.size()==1)
        {
         TreeNode *root=new TreeNode(inorder[0]);
            return root;
        }
      
         return build(preorder,inorder,0,inorder.size()-1);
    }
};
