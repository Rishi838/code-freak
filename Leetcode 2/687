/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void h(TreeNode *root,int v,int c,int &ans)
    {
        if(root==NULL || root->val !=v)
        {
        return;
        }
       
        ans=max(ans,c);
        h(root->left,v,c+1,ans);
        h(root->right,v,c+1,ans);
    }
    void func(TreeNode *root,int &ans)
    {
        if(root==NULL)
        return;
        int a=0,b=0;
        h(root->left,root->val,1,a);
        
        h(root->right,root->val,1,b);
         
     
        int c=a+b;
         
        ans=max(ans,c);
        
        func(root->left,ans);
        func(root->right,ans);
    }
    int longestUnivaluePath(TreeNode* root) {
        int ans=INT_MIN;
        func(root,ans);
        if(root==NULL)
        return 0;
        return ans;
    }
};
