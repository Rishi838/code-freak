/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
   void func(vector<vector<int>> &v,ListNode **head,int a){
       cout<<v[0].size()-a;
       if(*head==NULL)
       return;
       for(int i=a;i<v[0].size()-a;i++)
       {
           if(*head){
           v[a][i]=(*head)->val;
          (*head)=(*head)->next;
           }
       }
       for(int i=a+1;i<v.size()-a;i++)
       {
           if(*head){
           v[i][v[0].size()-1-a]=(*head)->val;
           (*head)=(*head)->next;
       }
       }
       for(int i=v[0].size()-2-a;i>=a;i--)
       {
        if(*head){
           v[v.size()-a-1][i]=(*head)->val;
           (*head)=(*head)->next;
       }
       }
       for(int i=v.size()-2-a;i>a;i--)
       {
        //    cout<<i<<" ";
          if(*head){
           v[i][a]=(*head)->val;
           (*head)=(*head)->next;
       }
       }
   }
    vector<vector<int>> spiralMatrix(int m, int n, ListNode* head) {
        vector<vector<int>> v(m,vector<int>(n,-1));
        for(int i=0;i<max(m,n);i++)
        func(v,&head,i);
        return v;
    }
};
