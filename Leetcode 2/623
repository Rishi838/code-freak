/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void func(TreeNode **root,int c,int d,int v)
    {
        if(c >=d || *root==NULL)
        return;
        if(c==d-1)
        {
            TreeNode *a=(*root)->left,*b=(*root)->right;
            TreeNode *ptr=new TreeNode(v),*ptr1=new TreeNode(v);
            // cout<<a->val<<" "<<b->val<<" "<<ptr->val<<endl;
             (*root)->left=ptr;
              (*root)->right=ptr1;
            //  cout<<a->val<<" "<<b->val<<" "<<ptr->val<<" "<< (*root)->left->val<<" "<< (*root)->right->val<<endl;
              (*root)->left->left=a;
             (*root)->right->right=b;
        }
        else
        {
            func(&(*root)->left,c+1,d,v);
            func(&(*root)->right,c+1,d,v);
        }
    }
    TreeNode* addOneRow(TreeNode* root, int val, int depth) {
        if(depth==1)
        {
            TreeNode  *r=new TreeNode(val);
            r->left=root;
            return r;
        }
        func(&root,1,depth,val);
        return root;
    }
};
