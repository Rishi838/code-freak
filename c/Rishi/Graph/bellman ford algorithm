#include <bits/stdc++.h>
using namespace std;

struct edge
{
    int from, to, wt;
};

void bellman_ford(vector<edge> edge_list, int v, int src)
{
    vector<int> parent(v, -1);
    vector<int> value(v, INT16_MAX);
    vector<int> cost_parent(v);
    value[src] = 0;
    parent[src] = -1;
    bool flag;
    for (int i = 0; i < v - 1; i++)
    {
        flag = false;
        for (int j = 0; j < edge_list.size(); j++)
        {
            int u = edge_list[j].from, v = edge_list[j].to, w = edge_list[j].wt;
            if (value[u] + w < value[v])
            {
                value[v] = value[u] + w;
                parent[v] = u;
                cost_parent[v] == value[v];
                flag = true;
            }
        }
        if (!flag)
        {
            break;
        }
    }

    for (int j = 0; j < edge_list.size(); j++)
    {
        int u = edge_list[j].from, v = edge_list[j].to, w = edge_list[j].wt;
        if (value[u] + w < value[v])
        {
            cout << "- edge wt cycle so bellman ford algorithm is not applicable";
            return;
        }
    }

    for (int i = 0; i < v; i++)
    {
        cout << parent[i] << "-->" << i << "  Wt:" << value[i] << endl;
    }
}

int main()
{
    int e, v;
    cin >> v >> e;
    vector<edge> edge_list;
    edge temp;
    for (int i = 0; i < e; i++)
    {
        cin >> temp.from >> temp.to >> temp.wt;
        edge_list.push_back(temp);
    }
    bellman_ford(edge_list, v, 0);
    return 0;
}
