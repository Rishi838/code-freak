#include <iostream>
#include <vector>
#include<list>
#include<map>
using namespace std;

void add_edge(map<int,bool> &visited,map<int,list<int>> &adj, int src, int data)
{
    adj[src].push_back(data);
    adj[data].push_back(src);
    visited[src]=false;
    visited[data]=false;
    
}

void depth_first_traversal(map<int,bool>& visited,map<int,list<int>> &adj,int v)
{
    visited[v]=true;
    cout<<v<<" ";
    list<int> :: iterator i;
   for(i=adj[v].begin();i!=adj[v].end();i++)
   {
       if(!visited[*i])
       {
           depth_first_traversal(visited,adj,*i);
       }
   }
}

int main()
{
    map<int,bool> visited;
    map<int,list<int>> vec;
    int vertices = 7;
     add_edge(visited,vec, 0, 1);
    add_edge(visited,vec, 0, 3);
    add_edge(visited,vec, 1, 2);
    add_edge(visited,vec, 1, 3);
    add_edge(visited,vec, 1, 5);
    add_edge(visited,vec, 1, 6);
    add_edge(visited,vec, 2, 3);
    add_edge(visited,vec, 2, 4);
    add_edge(visited,vec, 2, 5);
    add_edge(visited,vec, 3, 4);
    add_edge(visited,vec, 4, 6);
    
     depth_first_traversal(visited,vec,0);
    return 0;
}
