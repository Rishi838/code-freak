//Circular queue
#include <stdio.h>
#include <stdlib.h>

struct queue
{
    int size, f, b, *arr;
};

int isempty(struct queue *q)
{
    if (q->f == q->b)
    {
        printf("Queue is empty\n");
        return 1;
    }
    return 0;
}

int isfull(struct queue *q)
{
    if (q->f == (q->b + 1) % q->size)
    {
        printf("Queue is Full\n");
        return 1;
    }
    return 0;
}

void enqueue(struct queue *q, int val)
{
    if (isfull(q))
    {
        printf("Queue Overflow\n");
    }
    else
    {
        q->b = (q->b + 1) % q->size;
        q->arr[q->b] = val;
        printf("Enqueued Element %d\n", q->arr[q->b]);
    }
}

int dequeue(struct queue *q)
{
    if (isempty(q))
    {
        printf("Queue Undeflow\n");
        return -1;
    }
    else
    {
        q->f = (q->f + 1) % q->size;
        int val = q->arr[q->f];
        return val;
    }
}
int main()
{
    struct queue *q = (struct queue *)malloc(sizeof(struct queue));
    q->size = 4;
    q->f = q->b = 0;
    q->arr = (int *)malloc(q->size * sizeof(int));
    enqueue(q, 10);
    enqueue(q, 20);
    enqueue(q, 10);
    enqueue(q, 10);
    dequeue(q);
    dequeue(q);
    dequeue(q);
    isempty(q);
    isfull(q);
    enqueue(q, 20);
    enqueue(q, 20); //WE have reused the queue once again but it is not displaying because of the function we made
    enqueue(q, 20);
    isfull(q);
}
