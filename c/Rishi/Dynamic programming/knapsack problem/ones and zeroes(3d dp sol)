You are given an array of binary strings strs and two integers m and n.

Return the size of the largest subset of strs such that there are at most m 0's and n 1's in the subset.

A set x is a subset of a set y if all elements of x are also elements of y.

 

Example 1:

Input: strs = ["10","0001","111001","1","0"], m = 5, n = 3
Output: 4
Explanation: The largest subset with at most 5 0's and 3 1's is {"10", "0001", "1", "0"}, so the answer is 4.
Other valid but smaller subsets include {"0001", "1"} and {"10", "1", "0"}.
{"111001"} is an invalid subset because it contains 4 1's, greater than the maximum of 3.



class Solution {
public:
    int findMaxForm(vector<string>& strs, int m, int n) {
        int sz=strs.size();
        int dp[sz+1][m+1][n+1];
        for(int i=0;i<=sz;i++)
        {
             for(int j=0;j<=m;j++)
             {
                 for(int k=0;k<=n;k++)
                 {
                     dp[i][j][k]=0;
                     
                 }
             }
        }
        int ans=0;
        for(int i=1;i<=sz;i++)
        {
            int ones=count(strs[i-1].begin(),strs[i-1].end(),'1');
            int zeroes=strs[i-1].size()-ones;
            for(int j=0;j<=m;j++)
            {
                for(int k=0;k<=n;k++)
                {
                    dp[i][j][k]=dp[i-1][j][k];
                    if(j>=zeroes && k>=ones)
                        dp[i][j][k]=max(dp[i][j][k],dp[i-1][j-zeroes][k-ones] + 1);
                        ans=max(ans,dp[i][j][k]);
                }
            }
        }
        return ans;
    }
};
