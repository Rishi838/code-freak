ou are given an integer array nums and an integer target.

You want to build an expression out of nums by adding one of the symbols '+' and '-' before each integer in nums and then concatenate all the integers.

For example, if nums = [2, 1], you can add a '+' before 2 and a '-' before 1 and concatenate them to build the expression "+2-1".
Return the number of different expressions that you can build, which evaluates to target.

 

Example 1:

Input: nums = [1,1,1,1,1], target = 3
Output: 5
Explanation: There are 5 ways to assign symbols to make the sum of nums be target 3.
-1 + 1 + 1 + 1 + 1 = 3
+1 - 1 + 1 + 1 + 1 = 3
+1 + 1 - 1 + 1 + 1 = 3
+1 + 1 + 1 - 1 + 1 = 3
+1 + 1 + 1 + 1 - 1 = 3

class Solution {
public:
    
    
int dp_table(vector<int> nums,int sum,int n)
{
    int dp[n+1][sum+1];
    for(int i=0;i<=n;i++)
    dp[i][0]=1;
    for(int i=1;i<=sum;i++)
    dp[0][i]=0;
    for(int i=1;i<=n;i++)
    {
        for(int j=1;j<=sum;j++)
        {
            if(nums[i-1]==0)
            {
                dp[i][j]=dp[i-1][j];
            }
            else if(j >= nums[i-1])
            {
                dp[i][j]=dp[i-1][j] + dp[i-1][j-nums[i-1]];
            }
            else
            {
                dp[i][j]=dp[i-1][j];
            }
        }
    }
    return dp[n][sum];
}
    
    int findTargetSumWays(vector<int>& nums, int target) {
        int sum = 0;
        int count_zero = 0;
        for(int i = 0; i < nums.size(); ++i){
            sum += nums[i];
            if(nums[i] == 0)
                ++count_zero;
        }
        int s1 = (sum + target)/2;
        if((sum + target)%2 != 0)
            return 0;
        else
            return pow(2, count_zero)*dp_table(nums, s1,nums.size());
    }
};
