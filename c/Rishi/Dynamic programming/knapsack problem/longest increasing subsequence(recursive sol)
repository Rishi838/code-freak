Given an integer array nums, return the length of the longest strictly increasing subsequence.

A subsequence is a sequence that can be derived from an array by deleting some or no elements without changing the order of the remaining elements. For example, [3,6,2,7] is a subsequence of the array [0,3,1,6,2,2,7].

 

Example 1:

Input: nums = [10,9,2,5,3,7,101,18]
Output: 4
Explanation: The longest increasing subsequence is [2,3,7,101], therefore the length is 4.


#include <bits/stdc++.h>
using namespace std;

int lis(vector<int> vec,int i,vector<int> v)
{
    if(i>=vec.size())
    {
        return 0;
    }
    if(v.empty() || v.back()<vec[i])
    {
        v.push_back(vec[i]);
        int a= 1 + lis(vec,i+1,v);
        v.pop_back();
        int b=lis(vec,i+1,v);
        return max(a,b);
    } 
    else 
    {
        return lis(vec,i+1,v);
    }
}

int main()
{
    vector<int> vec{10,9,2,5,3,7,101,18},v;
    cout<<lis(vec,0,v);
    return 0;
}
