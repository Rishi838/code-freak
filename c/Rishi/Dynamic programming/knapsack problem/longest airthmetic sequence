Given an array nums of integers, return the length of the longest arithmetic subsequence in nums.

Recall that a subsequence of an array nums is a list nums[i1], nums[i2], ..., nums[ik] with 0 <= i1 < i2 < ... < ik <= nums.length - 1, and that a sequence seq is arithmetic 
if seq[i+1] - seq[i] are all the same value (for 0 <= i < seq.length - 1).

 

Example 1:

Input: nums = [3,6,9,12]
Output: 4
Explanation: 
The whole array is an arithmetic sequence with steps of length = 3.
Example 2:

Input: nums = [9,4,7,2,10]
Output: 3
Explanation: 
The longest arithmetic subsequence is [4,7,10].


class Solution {
public:
    int longestArithSeqLength(vector<int>& nums) {
       
  int ans=INT_MIN;
  vector<vector<int>> vec(nums.size(),vector<int>(1002,0));
  for (int i = 0; i < nums.size(); i++)
  {
    for (int j = 0; j < i; j++)
    {
      int a = nums[i] - nums[j] + 500;
      vec[i][a] = vec[j][a] > 0? vec[j][a] + 1:2;
     ans=max(ans,vec[i][a]);
    }
  }
  return ans; 
    }
};
