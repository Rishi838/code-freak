Given an n x n array of integers matrix, return the minimum sum of any falling path through matrix.

A falling path starts at any element in the first row and chooses the element in the next row that is either directly below or diagonally left/right. Specifically, 
the next element from position (row, col) will be (row + 1, col - 1), (row + 1, col), or (row + 1, col + 1).

 

Example 1:

Input: matrix = [[2,1,3],[6,5,4],[7,8,9]]
Output: 13
Explanation: There are two falling paths with a minimum sum underlined below:
[[2,1,3],      [[2,1,3],
 [6,5,4],       [6,5,4],
 [7,8,9]]       [7,8,9]]


class Solution {
public:
    int minFallingPathSum(vector<vector<int>>& matrix) {
          vector<vector<int>> vec(matrix.size(),vector<int> (matrix.size(),0));
            int n=matrix.size();
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<n;j++)
            {
                if(i==0)
                    vec[i][j]=matrix[i][j];
                else if(j==0)
                    vec[i][j]=min(vec[i-1][j],vec[i-1][j+1]) + matrix[i][j];
                else if(j==n-1)
                   vec[i][j]=min(vec[i-1][j],vec[i-1][j-1])  + matrix[i][j]; 
                else
                    vec[i][j]=min(vec[i-1][j],min(vec[i-1][j-1],vec[i-1][j+1]))  + matrix[i][j];
            }
        }
        return *min_element(vec[n-1].begin(),vec[n-1].end());
    }
};
