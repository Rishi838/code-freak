Given an integer array nums, return the length of the longest strictly increasing subsequence.

A subsequence is a sequence that can be derived from an array by deleting some or no elements without changing the order of the remaining elements. For example, [3,6,2,7] is a subsequence of the array [0,3,1,6,2,2,7].

 

Example 1:

Input: nums = [10,9,2,5,3,7,101,18]
Output: 4
Explanation: The longest increasing subsequence is [2,3,7,101], therefore the length is 4.


#include <bits/stdc++.h>
using namespace std;

int lis(vector<int> vec)
{
  vector<int> list(vec.size(),1);
  for(int i=1;i<vec.size();i++)
  {
         for(int j=0;j<i;j++)
         {
             if(vec[i]>vec[j] && list[i] <=list[j])
             {
                 list[i]=list[j]+1;
             }
         }
  }
  return *max_element(list.begin(),list.end());
}

int main()
{
    vector<int> vec{ 10, 22, 9, 33, 21, 50, 41, 60 };
    cout<<lis(vec);
    return 0;
}
