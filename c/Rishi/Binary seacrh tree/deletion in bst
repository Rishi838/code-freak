//deleting a node from bst
#include <iostream>
using namespace std;

class Node
{
public:
    int data;
    Node *left, *right;
    Node(int x)
    {
        data = x;
        left = NULL;
        right = NULL;
    }
};

void inorder(Node *root)
{
    if (root == NULL)
    {
        return;
    }
    inorder(root->left);
    cout << root->data << " ";
    inorder(root->right);
}

Node *inorder_predecessor(Node *root)
{
    //Inorder predeccor ka rightmost child
    root = root->left;
    while (root->right != NULL)
    {
        root = root->right;
    }
    return root;
}

Node *deletion(Node *root, int k)
{
    Node *ipree;
    if (root == NULL)
    {
        return NULL;
    }
    if (root->left == NULL && root->right == NULL)
    {
        free(root);
        return NULL;
    }

    //First search for the node to be deleted
    if (k < root->data)
    {
      root->left=  deletion(root->left, k);
    }
    else if (k > root->data)
    {
        root->right=deletion(root->right, k);
    }
    else
    {
        ipree = inorder_predecessor(root);
        root->data = ipree->data;
       root->left= deletion(root->left, ipree->data);
    }
    return root;
}

int main()
{
    Node *root = new Node(8);
    root->left = new Node(3);
    root->right = new Node(10);
    root->left->left = new Node(1);
    root->left->right = new Node(6);
    root->right->right = new Node(14);
    root->right->right->right = new Node(16);
    inorder(root);
    root=deletion(root,8);
    cout<<endl;
    inorder(root);
    return 0;
}
