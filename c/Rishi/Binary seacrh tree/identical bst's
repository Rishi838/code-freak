//zig zag treversal
#include <iostream>
#include <stack>
using namespace std;

class Node
{
public:
    int data;
    Node *left, *right;
    Node(int x)
    {
        data = x;
        left = NULL;
        right = NULL;
    }
};

bool identical_bst(Node *root1, Node *root2)
{
    if (root1 == NULL and root2 == NULL)
    {
        return true;
    }
    else if (root1 == NULL || root2 == NULL)
    {
        return false;
    }
    else
    {
        bool flag1 = (root1->data == root2->data);
        bool left = identical_bst(root1->left, root2->left);
        bool right = identical_bst(root1->right, root2->right);

        if (flag1 && left && right)
        {
            return true;
        }
        return false;
    }
}
int main()
{
    Node *root = new Node(1);
    root->left = new Node(2);
    root->right = new Node(3);
    root->left->right = new Node(4);
    root->left->right->left = new Node(6);
    root->left->right->right = new Node(7);
    root->right->right = new Node(5);
    root->right->right->left = new Node(8);
    root->right->right->right = new Node(9);

    Node *root1 = new Node(1);
    root1->left = new Node(2);
    root1->right = new Node(3);
    root1->left->right = new Node(4);
    root1->left->right->left = new Node(6);
    root1->left->right->right = new Node(7);
    root1->right->right = new Node(5);
    root1->right->right->left = new Node(8);
    root1->right->right->right = new Node(9);

    if (identical_bst(root, root1))
    {
        cout << "idential";
    }
    else
    {
        cout << "unidentical";
    }

    return 0;
}
