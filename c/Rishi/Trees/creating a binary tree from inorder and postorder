//Building a tree from inorder and preorder traversals
// Inorder[] = {4,2,1,7,5,8,3,6}
// Preoder[]={1,2,4,3,5,7,8,6}

// Tree:
//                 1
//                / \
//               /   \
//              2     3
//             /     / \
//            /     /   \
//           4     5     6
//                / \
//               /   \
//              7     8
#include <iostream>
using namespace std;

class Node
{
public:
    int data;
    Node *left, *right;
    Node(int x)
    {
        data = x;
        left = NULL;
        right = NULL;
    }
};

int search(int inorder[], int start, int end, int current)
{
    for (int i = start; i <= end; i++)
    {
        if (inorder[i] == current)
        {
            return i;
        }
    }
    return -1;
}

Node *buildTree(int preorder[], int inorder[], int start, int end)
{
    static int idx = 7;
    cout << "start " << start << "  End:  " << end << "  index: " << idx << endl;
    if (start > end)
    {
        cout << "Returning NULL" << endl;
        return NULL;
    }
    int current = preorder[idx];
    idx--;
    Node *root = new Node(current);
    if (start == end)
    {
        cout << "returning " << root->data << endl;
        return root;
    }
    int position = search(inorder, start, end, current);
    cout << "Position of current " << current << " is " << position << endl;
    cout << "Calling root->right for " << current << "->right" << endl;
    root->right = buildTree(preorder, inorder, position + 1, end);
    cout << "Calling root->left for " << current << "->left" << endl;
    root->left = buildTree(preorder, inorder, start, position - 1);

    cout << "Returning root " << root->data << endl
         << endl;
    return root;
}

void inorder(Node *root)
{
    if (root == NULL)
    {
        return;
    }
    inorder(root->left);
    cout << root->data << " ";
    inorder(root->right);
}
int main()
{
    int Inorder[] = {4, 8, 2, 5, 1, 6, 3, 7};
    int Preoder[] = {8, 4, 5, 2, 6, 7, 3, 1};
    Node *root = buildTree(Preoder, Inorder, 0, 7);
    inorder(root);
    return 0;
}
