//Height balanced tree
/* 
         1                                          
        / \                                      
       /   \                                   
      2     3                                
     / \    /  \                            
    /   \   /   \                          
   4      5 6    7                        
*/

#include <iostream>
#include <queue>
using namespace std;

class Node
{
public:
    int data;
    Node *left, *right;
    Node(int x)
    {
        data = x;
        left = NULL;
        right = NULL;
    }
};

int height(Node *root)
{
    if (root == NULL)
    {
        return 0;
    }

    int lh = height(root->left);
    int rh = height(root->right);
    return max(lh, rh) + 1;
}

bool balanced_height(Node *root)
{
    if (root == NULL)
    {
        return true;
    }

    if (balanced_height(root->left) == false)
    {
        return false;
    }
    if (balanced_height(root->right) == false)
    {
        return false;
    }
    int lh = height(root->left);
    int rh = height(root->right);
    if (abs(lh - rh) <= 1)
    {
        return true;
    }
    else 
    {
        return false;
    }
}

int main()
{
    Node *root = new Node(1);
    root->left = new Node(2);
    root->right = new Node(3);
    root->left->left = new Node(4);
    root->left->right = new Node(5);
    root->right->left = new Node(6);
    root->right->right = new Node(7);
    root->right->right->right = new Node(8);
    root->right->right->right->right = new Node(9);


    if (balanced_height(root))
    {
        cout << "Height Balanced Tree";
    }
    else
        cout << "Height Unbalanced Tree";

    return 0;
}
