//Quick sort
#include <stdio.h>

int partition(int arr[], int low, int high)
{
    int pivot = arr[low];
    int i = low + 1;
    int j = high;
    do
    {
        while (arr[i] <= pivot)
        {
            i++;
        }
        while (arr[j] > pivot)
        {
            j--;
        }
        if (i < j)
        {
            int temp = arr[i];
            arr[i] = arr[j];
            arr[j] = temp;
        }
    } while (i < j);
    int temp1 = arr[low];
    arr[low] = arr[j];
    arr[j] = temp1;
    return j;
}
void quick_sort(int arr[], int low, int high)
{
    int partition_index; //Index of pivot after partiton
    if (low < high)
    {
        partition_index = partition(arr, low, high);
        quick_sort(arr, low, partition_index - 1);  //Sort left array
        quick_sort(arr, partition_index + 1, high); //Sort right array
    }
}
int main()
{
    int arr[] = {2, 5, 3, 1, 7, 6, 8};
    int size = sizeof(arr) / sizeof(int);
    printf("Original array:  ");
    for (int i = 0; i < size; i++)
    {
        printf("%d  ", arr[i]);
    }
    printf("\nSorted array:  ");
    quick_sort(arr, 0, size - 1);
     for (int i = 0; i < size; i++)
    {
        printf("%d  ", arr[i]);
    }
    return 0;
}
