/*
Given a stack of integers, write a function pairWiseConsecutive() that checks whether numbers in the stack are 
pairwise consecutive or not. The pairs can be increasing or decreasing, and if the stack has an odd number of 
elements, the element at the top is left out of a pair. The function should retain the original stack content.
Only following standard operations are allowed on stack.
 

push(X): Enter a element X on top of stack.
pop(): Removes top element of the stack.
empty(): To check if stack is empty.

Input : stack = [4, 5, -2, -3, 11, 10, 5, 6, 20]
Output : Yes
Each of the pairs (4, 5), (-2, -3), (11, 10) and
(5, 6) consists of consecutive numbers.
*/
#include <iostream>
#include <stack>
using namespace std;
int main()
{
    stack<int> s;
    int n, a;
    cin >> n;
    for (int i = 0; i < n; i++)
    {
        cin >> a;
        s.push(a);
    }
    if (s.size() % 2 != 0)
    {
        s.pop();
    }
    bool flag1=true;
    while (!s.empty())
    {
        bool flag=false;
        a=s.top();
        s.pop();
        int b=s.top();
        s.pop();
        if (b==a+1 || b==a-1)
        {
        flag=true;
        }
        if (!flag)
        {
            flag1=false;
            cout<<"No";
            break;
        }
    }
    if (flag1)
    {
        cout<<"Yes";
    }
    
    
    return 0;
}
