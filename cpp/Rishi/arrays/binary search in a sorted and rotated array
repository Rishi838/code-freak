//search in a sorted and rotated array using O(log n)
#include <iostream>
using namespace std;
int main()
{
    int arr[] = {3, 4, 5, 6, 7, 8, 9, 1, 2}, i = 0, element = 3, low, high, mid;
    int size=sizeof(arr)/sizeof(int);

    //First find pivot from where array is rotated
    while (arr[i + 1] > arr[i] && i < 8)
    {
        i++;
    }
    //Now it is divided into two parts left subarray and right subarray
    // if element to be found is greater than arr[0]than it would be found in left subarray else in right one
    if (element >= arr[0])
    {
        low = 0;
        high = i;
        while (low <= high)
        {
            mid = (low + high) / 2;
            if (arr[mid] == element)
            {
                cout << mid;
                break;
            }
            else if (element > arr[mid])
            {
                low = mid + 1;
            }
            else
            {
                high = mid - 1;
            }
        }
    }
    else
     {
        
        low = i+1;
        high = size-1;
        while (low <= high)
        {
            mid = (low + high) / 2;
            if (arr[mid] == element)
            {
                cout << mid;
                break;
            }
            else if (element > arr[mid])
            {
                low = mid + 1;
            }
            else
            {
                high = mid - 1;
            }
        } 
     }

    return 0;
}
