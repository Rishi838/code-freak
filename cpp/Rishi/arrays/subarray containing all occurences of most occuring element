Given a non-empty array of non-negative integers nums, the degree of this array is defined as the maximum frequency of any one of its elements.

Your task is to find the smallest possible length of a (contiguous) subarray of nums, that has the same degree as nums.

int findShortestSubArray(vector<int>& nums) {
     int ans=INT_MIN;
        map<int,int>m;
        map<int,vector<int>> mp;
        for(int i=0;i<nums.size();i++)
        {
            if(mp.find(nums[i]) != mp.end())
            {
              mp[nums[i]].push_back(i);
            }
            else
            {
               vector<int> vec{i};
                mp[nums[i]]=vec;
            }
          m[nums[i]]++;
            ans=max(ans,m[nums[i]++]);
        }
        int answer=INT_MAX;
     for(auto i : m)
     {
        if(i.second==ans)
        {
           int c=mp[i.first].size();
            int a=mp[i.first][c-1] - mp[i.first][0] +1;
            answer= min(a,answer);
        }
     }
    return answer;
    }
