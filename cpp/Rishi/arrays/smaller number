Given the array nums, for each nums[i] find out how many numbers in the array are smaller than it. That is, for each nums[i] you have to count the number of valid j's such that j != i and nums[j] < nums[i].

Return the answer in an array.

 

Example 1:

Input: nums = [8,1,2,2,3]
Output: [4,0,1,1,3]
Explanation: 
For nums[0]=8 there exist four smaller numbers than it (1, 2, 2 and 3). 
For nums[1]=1 does not exist any smaller number than it.
For nums[2]=2 there exist one smaller number than it (1). 
For nums[3]=2 there exist one smaller number than it (1). 
For nums[4]=3 there exist three smaller numbers than it (1, 2 and 2).


 class Solution {
public:
    vector<int> smallerNumbersThanCurrent(vector<int>& nums) {
    vector<pair<int,int>> vec;
        for(int i=0;i<nums.size();i++)
        {
            vec.push_back({nums[i],i});
        }
        sort(vec.begin(),vec.end());
        vector<int> ans(nums.size());
        int a=0,c=0;
        ans[vec[0].second]=0;
        for(int i=1;i<nums.size();i++)
        {
            if(vec[i].first > vec[i-1].first)
            {
                a++;
                ans[vec[i].second]=i;
                c=0;
            }
            else
            {
                 ans[vec[i].second]=i-c-1;
                c++;
            }
 
        }
        
        return ans;
        
    }
};
