You are given two integer arrays nums1 and nums2 sorted in ascending order and an integer k.

Define a pair (u, v) which consists of one element from the first array and one element from the second array.

Return the k pairs (u1, v1), (u2, v2), ..., (uk, vk) with the smallest sums.

  vector<vector<int>> kSmallestPairs(vector<int>& nums1, vector<int>& nums2, int k) {
      int i=0,j=0;
        vector<vector<int>> vec;
        typedef pair<int,pair<int,int>> ppi;
         priority_queue<ppi,vector<ppi>,greater<ppi>> p;
        for(int i=0;i<nums1.size();i++)
        {
    for(int j=0;j<nums2.size();j++)
    {
  int sum=nums1[i] + nums2[j];
        p.push({sum,{nums1[i],nums2[j]}});
    }
        
    }
            if(nums1.size()*nums2.size() < k)
            {
                 k=nums1.size()*nums2.size();
            }
            while(k--)
            {
                ppi curr=p.top();
                p.pop();
             vector<int> v{curr.second.first,curr.second.second};
                vec.push_back(v);
            }
            return vec;
    }
