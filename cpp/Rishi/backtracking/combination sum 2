
Given a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates where the candidate numbers sum to target.

Each number in candidates may only be used once in the combination.


class Solution {
public:
    
      void solve(int target,int idx,vector<int>&vec,set<vector<int>>&ans,vector<int> &candidates)
    {
         
           if(target==0)
          {
              ans.insert(vec);
              return;
          }
          if(target<0 || idx>=candidates.size())
              return;
          
          solve(target,idx+1,vec,ans,candidates);
          vec.push_back(candidates[idx]);
          solve(target-candidates[idx],idx+1,vec,ans,candidates);
          vec.pop_back();
    }
    
    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {
        sort(candidates.begin(),candidates.end());
         set<vector<int>> ans;
        vector<int> vec;
        vector<vector<int>> a;
        solve(target,0,vec,ans,candidates);
        for(auto i:ans)
        {
            a.push_back(i);
        }
        return a;
    }
};
