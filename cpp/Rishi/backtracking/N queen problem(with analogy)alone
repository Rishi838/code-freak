#include <iostream>
#define n 5
using namespace std;

int arr[n][n];

bool column_safe(int a, int b)
{
    for (int i = 0; i < n; i++)
    {
        if (arr[i][b] != 0)
        {
            return false;
        }
    }
    return true;
}

bool row_safe(int a, int b)
{
    for (int i = 0; i < n; i++)
    {
        if (arr[a][i] != 0)
            return false;
    }
    return true;
}

bool diagonal__safe(int a, int b)
{
   int c=a,d=b;
   while(c>=0 && d<n)
   {
       if(arr[c][d]!=0)
       {
           return false;
       }
       c--;
       d++;
   }
   while (a>=0 && b>=0)
   {
       if(arr[a][b]!=0)
       {
           return false;
       }
       a--;b--;
   }
   return true;
}

bool n_queen_problem(int a)
{
    cout<<"calling function for row number "<<a<<endl<<endl;
    if(a>=n)
    {
        return true;
    }
    for (int i = 0; i < n; i++)
    {
        cout<<"Diagnol safe("<<a<<","<<i<<") = "<<diagonal__safe(a,i)<<"  Row safe("<<a<<","<<i<<") = "<<row_safe(a,i)<<"  column safe("<<a<<","<<i<<") = "<<column_safe(a,i)<<endl<<endl;
        if(diagonal__safe(a,i) && row_safe(a,i) && column_safe(a,i))
        {
             arr[a][i]=1;
              cout<<"making arr["<<a<<"]["<<i<<"] as "<<arr[a][i]<<endl;
             if(n_queen_problem(a+1))
             return true;
        }
        arr[a][i]=0;
    }
    return false;
}

int main()
{
    n_queen_problem(0);
    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < n; j++)
        {
            cout<<arr[i][j]<<" ";
        }
        cout<<endl;
    }
    
    return 0;
}
