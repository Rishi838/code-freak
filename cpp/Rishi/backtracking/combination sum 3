Find all valid combinations of k numbers that sum up to n such that the following conditions are true:

Only numbers 1 through 9 are used.
Each number is used at most once.
Return a list of all possible valid combinations. The list must not contain the same combination twice, and the combinations may be returned in any order.

Input: k = 3, n = 7
Output: [[1,2,4]]
Explanation:
1 + 2 + 4 = 7
There are no other valid combinations.



class Solution {
public:
    
   void solve(vector<int>&vec,vector<vector<int>>&ans,int target,int k,int prev)
   {
         if(vec.size()==k)
         {
             int sum=0;
             for(auto i:vec)
             {
                 sum+=i;
             }
             if(sum==target)
             {
                 ans.push_back(vec);
             }
             return;
         }
       for(int i=prev+1;i<=9;i++)
       {
           vec.push_back(i);
           solve(vec,ans,target,k,i);
           vec.pop_back();
       }
   }
    
    vector<vector<int>> combinationSum3(int k, int n) {
        vector<int> vec;
        vector<vector<int>> ans;
        solve(vec,ans,n,k,0);
            return ans;
    }
};
