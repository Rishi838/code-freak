#include <bits/stdc++.h>
#define m  for (int i = 0; i < n; i++)    {        if (arr[i][b] != 0)    {    return false;    }    }    return true;
#define p  for (int i = 0; i < n; i++)    {        if (arr[a][i] != 0)    return false;    }    return true;
using namespace std;
vector<vector<int>> arr;
int n;
bool column_safe(int a, int b)
{
  m
}

bool row_safe(int a, int b)
{
   p
}

bool diagonal__safe(int a, int b)
{
   int c=a,d=b;
   while(c>=0 && d<n)
   {     if(arr[c][d]!=0)       {          return false;  } c--;  d++; }
   while (a>=0 && b>=0)
   {       if(arr[a][b]!=0)  {  return false; }    a--;b--; } return true;
}

bool n_queen_problem(int a)
{
   
    if(a>=n)
    {        return true;    }
    for (int i = 0; i < n; i++)
    {
   if(diagonal__safe(a,i) && row_safe(a,i) && column_safe(a,i))        {         arr[a][i]=1;     if(n_queen_problem(a+1))     return true;        }
        arr[a][i]=0;
    }
    return false;
}
int main()
{
    cin>>n;
   arr.resize(n, vector<int>(n, 0));
    n_queen_problem(0);
    for(auto i:arr)
    {
        for(auto j:i)
        cout<<j<<" ";
        cout<<endl;
    }
	return 0;
	cout<<"for(i=0;i<n;++i)";
}
